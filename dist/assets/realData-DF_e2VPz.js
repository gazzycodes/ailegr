import{a as l}from"./index-C4-rDimr.js";import"./3d-vendor-DlSuIqDH.js";import"./react-vendor-DsceW-4w.js";import"./animation-vendor-CRQTWgvG.js";const v={},d=v?.VITE_API_URL||"http://localhost:4000",m=l.create({baseURL:d,timeout:1e4,headers:{"Content-Type":"application/json"}});async function w(){try{const t=(await m.get("/api/dashboard")).data?.metrics;if(!t)return null;const a=Number(t.totalRevenue||0),u=Number(t.totalExpenses||0),e=Number(t.netProfit??a-u),i=Number(t.previousRevenue||a),n=Number(t.previousExpenses||u),o=Number(t.previousNetProfit||e);return{revenue:{current:a,previous:i,trend:a>=i?"up":"down"},expenses:{current:u,previous:n,trend:u>=n?"up":"down"},profit:{current:e,previous:o,trend:e>=o?"up":"down"},cashFlow:void 0}}catch(r){return console.warn("Dashboard metrics fetch failed, proceeding without real KPIs",r),null}}async function h(){try{const r=await m.get("/api/dashboard"),t=r.data?.metrics,a=Array.isArray(r.data?.aiInsights)?r.data.aiInsights:[];if(!t)return{metrics:null,aiInsights:a};const u=Number(t.totalRevenue||0),e=Number(t.totalExpenses||0),i=Number(t.netProfit??u-e),n=Number(t.previousRevenue||u),o=Number(t.previousExpenses||e),p=Number(t.previousNetProfit||i);return{metrics:{revenue:{current:u,previous:n,trend:u>=n?"up":"down"},expenses:{current:e,previous:o,trend:e>=o?"up":"down"},profit:{current:i,previous:p,trend:i>=p?"up":"down"},cashFlow:void 0},aiInsights:a}}catch(r){return console.warn("Dashboard data fetch failed",r),{metrics:null,aiInsights:[]}}}async function b(r=12){const t=[`/api/metrics/time-series?metrics=revenue,expenses,profit&months=${r}`,`/api/reports/pnl?groupBy=month&months=${r}`,"/api/reports/pnl?period=last12m"];for(const a of t)try{const e=(await m.get(a)).data;if(Array.isArray(e?.series)){const i=e.series.map(s=>s.label),n=e.series.map(s=>Number(s.revenue||0)),o=e.series.map(s=>Number(s.expenses||0)),p=e.series.map(s=>Number(s.profit??Number(s.revenue||0)-Number(s.expenses||0)));return{labels:i,revenue:n,expenses:o,profit:p}}if(e?.revenueByMonth&&e?.expensesByMonth){const i=e.labels,n=e.revenueByMonth.map(s=>Number(s||0)),o=e.expensesByMonth.map(s=>Number(s||0)),p=n.map((s,c)=>s-(o[c]||0));return{labels:i,revenue:n,expenses:o,profit:p}}if(Array.isArray(e?.months)&&Array.isArray(e?.totals)){const i=e.months,n=e.totals.map(s=>Number(s.revenue||0)),o=e.totals.map(s=>Number(s.expenses||0)),p=n.map((s,c)=>s-(o[c]||0));return{labels:i,revenue:n,expenses:o,profit:p}}}catch{continue}return console.warn("No time-series endpoint responded with usable data"),null}async function g(r){const[t,a]=await Promise.all([h(),b(r??12)]);return{metrics:t.metrics,series:a,aiInsights:t.aiInsights}}export{h as fetchDashboardData,w as fetchDashboardMetrics,b as fetchTimeSeries,g as getDashboardWithSeries};
