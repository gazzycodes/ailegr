generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  members   Membership[]
}

model Membership {
  id        String   @id @default(cuid())
  userId    String
  tenantId  String
  role      Role     @default(OWNER)
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, tenantId])
}

enum Role {
  OWNER
  ADMIN
  MEMBER
}

model Account {
  id            String   @id @default(cuid())
  tenantId      String   @default("dev")
  code          String
  name          String
  type          AccountType
  normalBalance NormalBalance
  parentId      String?
  parent        Account? @relation("AccountHierarchy", fields: [parentId], references: [id])
  children      Account[] @relation("AccountHierarchy")
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  debitEntries  TransactionEntry[] @relation("DebitAccount")
  creditEntries TransactionEntry[] @relation("CreditAccount")
  categories    Category[]

  @@map("accounts")
  @@unique([tenantId, code])
}

model Transaction {
  id           String   @id @default(cuid())
  tenantId     String   @default("dev")
  date         DateTime
  description  String
  reference    String
  amount       Decimal
  customFields Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  entries  TransactionEntry[]
  expense  Expense?
  invoice  Invoice?

  @@map("transactions")
  @@unique([tenantId, reference])
}

model TransactionEntry {
  id              String   @id @default(cuid())
  tenantId        String   @default("dev")
  transactionId   String
  debitAccountId  String?
  creditAccountId String?
  amount          Decimal
  description     String?

  // Relations
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  debitAccount  Account?    @relation("DebitAccount", fields: [debitAccountId], references: [id])
  creditAccount Account?    @relation("CreditAccount", fields: [creditAccountId], references: [id])

  @@map("transaction_entries")
}

model Expense {
  id            String   @id @default(cuid())
  tenantId      String   @default("dev")
  transactionId String   @unique
  vendor        String
  vendorInvoiceNo String?
  categoryId    String?
  categoryKey   String?
  date          DateTime
  amount        Decimal
  description   String?
  receiptUrl    String?
  customFields  Json?
  isRecurring   Boolean  @default(false)
  isPending     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  transaction Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  category    Category?   @relation(fields: [categoryId], references: [id])
  pendingApproval PendingCategoryApproval?

  @@map("expenses")
  @@unique([tenantId, vendor, vendorInvoiceNo])
}

model Category {
  id             String   @id @default(cuid())
  tenantId       String   @default("dev")
  name           String
  key            String
  accountCode    String
  description    String?
  aiGenerated    Boolean  @default(false)
  isApproved     Boolean  @default(false)
  suggestionData Json?
  usageCount     Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  expenses Expense[]
  account  Account @relation(fields: [tenantId, accountCode], references: [tenantId, code])

  @@map("categories")
  @@unique([tenantId, key])
  @@unique([tenantId, name])
}

model PendingCategoryApproval {
  id               String   @id @default(cuid())
  tenantId         String   @default("dev")
  expenseId        String   @unique
  suggestedName    String
  suggestedKey     String
  suggestedAccount String
  aiReasoning      String?
  confidence       Float
  expenseDetails   Json
  status           String   @default("PENDING")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  expense Expense @relation(fields: [expenseId], references: [id], onDelete: Cascade)

  @@map("pending_category_approvals")
}

model Customer {
  id        String   @id @default(cuid())
  tenantId  String   @default("dev")
  name      String
  company   String?
  email     String
  phone     String?
  address   String?
  city      String?
  state     String?
  zipCode   String?
  country   String   @default("US")
  isActive  Boolean  @default(true)
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  invoices Invoice[]

  @@map("customers")
  @@unique([tenantId, email])
}

model Invoice {
  id            String   @id @default(cuid())
  tenantId      String   @default("dev")
  transactionId String   @unique
  customerId    String?
  customer      String
  invoiceNumber String
  date          DateTime
  dueDate       DateTime?
  amount        Decimal
  description   String?
  status        InvoiceStatus @default(DRAFT)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  transaction Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  customerRel Customer?   @relation(fields: [customerId], references: [id])

  @@map("invoices")
  @@unique([tenantId, invoiceNumber])
}

enum AccountType {
  ASSET
  LIABILITY
  EQUITY
  REVENUE
  EXPENSE
}

enum NormalBalance {
  DEBIT
  CREDIT
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}


model CompanyProfile {
  id                  String   @id @default(cuid())
  tenantId            String   @default("dev")
  legalName           String
  aliases             Json
  email               String?
  addressLines        Json
  city                String?
  state               String?
  zipCode             String?
  country             String   @default("US")
  timeZone            String?  // IANA tz (e.g., "America/New_York"); if null, use server time
  normalizedLegalName String
  normalizedAliases   Json
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@map("company_profiles")
  @@unique([tenantId])
}


model RecurringRule {
  id          String   @id @default(cuid())
  tenantId    String   @default("dev")
  type        String   // EXPENSE | INVOICE
  cadence     String   // DAILY | WEEKLY | MONTHLY | ANNUAL
  startDate   DateTime
  endDate     DateTime?
  dayOfMonth  Int?
  weekday     Int?     // 0-6, Sunday=0
  nextRunAt   DateTime
  lastRunAt   DateTime?
  isActive    Boolean  @default(true)
  payload     Json     // base posting payload (vendor/customer, amount, categoryKey, description, etc.)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("recurring_rules")
}


// Optional: local cache of user emails for membership listings
model UserProfile {
  userId    String  @id
  email     String  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


